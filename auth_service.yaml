openapi: 3.0.0
info:
  title: Muslim Matrimonial Authentication API
  version: 1.0.0
  description: Authentication service for user registration, login, and password management.
servers:
  - url: https://api.yourplatform.com/v1
    description: Production server

tags:
  - name: User Authentication
  - name: Admin Authentication
  - name: Verification

paths:
  # ==========================================
  # User Registration & Verification
  # ==========================================
  /auth/register:
    post:
      tags: [User Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        200:
          description: OTP sent for verification
          content:
            application/json:
              example: { "message": "OTP sent to phone and email" }
        400:
          description: Invalid input

  /auth/verify-phone:
    post:
      tags: [Verification]
      summary: Verify phone number via OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+919876543210"
                otp:
                  type: string
                  example: "123456"
      responses:
        200:
          description: Phone verified
          content:
            application/json:
              example: { "message": "Phone verified successfully" }
        400:
          description: Invalid OTP

  /auth/resend-phone-otp:
    post:
      tags: [Verification]
      summary: Resend OTP to phone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+919876543210"
      responses:
        200:
          description: OTP resent
          content:
            application/json:
              example: { "message": "OTP resent to phone" }

  /auth/verify-email:
    post:
      tags: [Verification]
      summary: Verify email via OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                otp:
                  type: string
                  example: "654321"
      responses:
        200:
          description: Email verified
          content:
            application/json:
              example: { "message": "Email verified successfully" }
        400:
          description: Invalid OTP

  /auth/resend-email-otp:
    post:
      tags: [Verification]
      summary: Resend OTP to email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        200:
          description: OTP resent
          content:
            application/json:
              example: { "message": "OTP resent to email" }

  # ==========================================
  # User Login & Password Management
  # ==========================================
  /auth/login:
    post:
      tags: [User Authentication]
      summary: User login with phone/email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Access/refresh tokens issued
          content:
            application/json:
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid credentials

  /auth/forgot-password:
    post:
      tags: [User Authentication]
      summary: Initiate password reset (via email/phone)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  example: "user@example.com"
      responses:
        200:
          description: Reset token generated
          content:
            application/json:
              example: { "message": "Reset instructions sent" }
        404:
          description: User not found

  /auth/reset-password:
    post:
      tags: [User Authentication]
      summary: Reset password using a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "reset_token_123"
                new_password:
                  type: string
                  example: "NewSecurePass123!"
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              example: { "message": "Password updated" }
        400:
          description: Invalid token

  /auth/change-password:
    post:
      tags: [User Authentication]
      summary: Change password after login
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: "OldPass123!"
                new_password:
                  type: string
                  example: "NewPass123!"
      responses:
        200:
          description: Password changed
          content:
            application/json:
              example: { "message": "Password updated" }
        401:
          description: Unauthorized

  # ==========================================
  # Admin Endpoints
  # ==========================================
  /auth/admin/login:
    post:
      tags: [Admin Authentication]
      summary: Admin login with predefined credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "admin@example.com"
                password:
                  type: string
                  example: "AdminPass123!"
      responses:
        200:
          description: Admin access token issued
          content:
            application/json:
              example: { "access_token": "admin_jwt_token_here" }
        401:
          description: Invalid admin credentials

  /auth/admin/reset-password:
    post:
      tags: [Admin Authentication]
      summary: Admin password reset (similar to user flow)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "admin_reset_token"
                new_password:
                  type: string
                  example: "NewAdminPass123!"
      responses:
        200:
          description: Admin password reset
          content:
            application/json:
              example: { "message": "Admin password updated" }

# ==========================================
# Data Models
# ==========================================
components:
  schemas:
    UserRegistrationRequest:
      type: object
      properties:
        create_profile_for:
          type: string
          example: "Myself"
          description: "Myself, Daughter, Son, Brother, Sister, Relative, or Friend"
        bride_groom_name:
          type: string
          example: "Ameer"
        phone:
          type: string
          example: "+919876543210"
        email:
          type: string
          example: "ameer@example.com"
        password:
          type: string
          example: "SecurePass123!"
      required:
        - create_profile_for
        - bride_groom_name
        - phone
        - email
        - password

    LoginRequest:
      type: object
      properties:
        identifier:
          type: string
          example: "+919876543210"
        password:
          type: string
          example: "SecurePass123!"
      required:
        - identifier
        - password

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT