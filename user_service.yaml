openapi: 3.0.0
info:
  title: Muslim Matrimonial User Service API
  version: 1.0.0
  description: User profile management, subscription, search, and communication features.
servers:
  - url: https://api.yourplatform.com/v1
    description: Production server

tags:
  - name: Profile Management
    description: User profile operations
  - name: Photos
    description: Photo management
  - name: Partner Preferences
    description: Partner preference settings
  - name: Subscriptions
    description: Subscription management
  - name: Search
    description: Profile search operations
  - name: Interests
    description: Interest management
  - name: Chat
    description: Chat operations

paths:
  /user/profile:
    get:
      tags: [Profile Management]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: Profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        404:
          description: Profile not found
    post:
      tags: [Profile Management]
      summary: Submit user details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        200:
          description: Profile updated
          content:
            application/json:
              example: { "message": "Profile saved successfully" }
        401:
          description: Unauthorized
    put:
      tags: [Profile Management]
      summary: Update profile details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        200:
          description: Profile updated
          content:
            application/json:
              example: { "message": "Profile updated successfully" }
    delete:
      tags: [Profile Management]
      summary: Deactivate account
      security:
        - bearerAuth: []
      responses:
        200:
          description: Account deactivated
          content:
            application/json:
              example: { "message": "Account deactivated successfully" }

  /user/photo/profile:
    get:
      tags: [Photos]
      summary: Get profile photo URL
      security:
        - bearerAuth: []
      responses:
        200:
          description: Profile photo URL
          content:
            application/json:
              example: { "profile_photo_url": "https://s3.amazonaws.com/..." }
    post:
      tags: [Photos]
      summary: Upload profile photo
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Photo uploaded
          content:
            application/json:
              example: { "profile_photo_url": "https://s3.amazonaws.com/..." }
    delete:
      tags: [Photos]
      summary: Remove profile photo
      security:
        - bearerAuth: []
      responses:
        200:
          description: Photo removed
          content:
            application/json:
              example: { "message": "Profile photo removed" }

  /user/photos:
    get:
      tags: [Photos]
      summary: Get all uploaded photos
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of photos
          content:
            application/json:
              example: { "photos": ["url1", "url2"] }
    post:
      tags: [Photos]
      summary: Upload multiple photos (max 3)
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 3
                  description: "Up to 3 photos allowed"
      responses:
        200:
          description: Photos uploaded
          content:
            application/json:
              example: { "photo_urls": ["url1", "url2"] }

  /user/photos/{photo_id}:
    delete:
      tags: [Photos]
      summary: Delete specific photo
      security:
        - bearerAuth: []
      parameters:
        - name: photo_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Photo deleted
          content:
            application/json:
              example: { "message": "Photo deleted successfully" }

  /user/partner-preferences:
    get:
      tags: [Partner Preferences]
      summary: Get partner preferences
      security:
        - bearerAuth: []
      responses:
        200:
          description: Preferences retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerPreferences'
    post:
      tags: [Partner Preferences]
      summary: Set partner preferences
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerPreferences'
      responses:
        200:
          description: Preferences saved
          content:
            application/json:
              example: { "message": "Preferences updated" }

  /user/subscribe:
    post:
      tags: [Subscriptions]
      summary: Initiate Razorpay subscription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  type: string
                  example: "yearly"
      responses:
        200:
          description: Razorpay order created
          content:
            application/json:
              example: { "order_id": "razorpay_order_123" }

  /user/subscription:
    get:
      tags: [Subscriptions]
      summary: Get current subscription status
      security:
        - bearerAuth: []
      responses:
        200:
          description: Subscription details
          content:
            application/json:
              example: { "plan": "yearly", "expires_at": "2025-01-01" }

  /user/subscription/webhook:
    post:
      tags: [Subscriptions]
      summary: Handle Razorpay payment webhook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_id:
                  type: string
                  example: "pay_123"
                status:
                  type: string
                  example: "success"
      responses:
        200:
          description: Webhook processed

  /user/search:
    get:
      tags: [Search]
      summary: Search profiles based on criteria
      security:
        - bearerAuth: []
      parameters:
        - name: min_age
          in: query
          schema:
            type: integer
            example: 25
        - name: max_age
          in: query
          schema:
            type: integer
            example: 30
        - name: min_height
          in: query
          schema:
            type: number
            example: 5.5
        - name: max_height
          in: query
          schema:
            type: number
            example: 6.0
        - name: marital_status
          in: query
          schema:
            type: array
            items:
              type: string
            example: ["Never married", "Divorced"]
        - name: education
          in: query
          schema:
            type: array
            items:
              type: string
            example: ["Masters", "Bachelors"]
        - name: profession
          in: query
          schema:
            type: array
            items:
              type: string
            example: ["Software Engineer", "Doctor"]
        - name: home_district
          in: query
          schema:
            type: array
            items:
              type: string
            example: ["Kozhikode", "Trivandrum"]
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          schema:
            type: integer
            example: 20
      responses:
        200:
          description: Search results
          content:
            application/json:
              example: { "profiles": [] }

  /user/interest:
    post:
      tags: [Interests]
      summary: Send interest to a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to_user_id:
                  type: string
                  example: "user_456"
      responses:
        200:
          description: Interest sent
          content:
            application/json:
              example: { "message": "Interest request sent" }

  /user/interests/received:
    get:
      tags: [Interests]
      summary: Get received interest requests
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of received interests
          content:
            application/json:
              example: { "requests": [] }

  /user/interests/sent:
    get:
      tags: [Interests]
      summary: Get sent interest requests
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of sent interests
          content:
            application/json:
              example: { "sent_requests": [] }

  /user/interest/{request_id}/accept:
    post:
      tags: [Interests]
      summary: Accept an interest request
      security:
        - bearerAuth: []
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Request accepted
          content:
            application/json:
              example: { "message": "Interest accepted" }

  /user/interest/{request_id}:
    delete:
      tags: [Interests]
      summary: Withdraw interest request
      security:
        - bearerAuth: []
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Interest withdrawn
          content:
            application/json:
              example: { "message": "Interest request withdrawn" }

  /user/chat/{user_id}/messages:
    get:
      tags: [Chat]
      summary: Get chat history with a user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          schema:
            type: integer
            example: 20
      responses:
        200:
          description: Chat messages
          content:
            application/json:
              example: { "messages": [] }
    post:
      tags: [Chat]
      summary: Send a message
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "Assalamualaikum, would you like to connect?"
      responses:
        200:
          description: Message sent
          content:
            application/json:
              example: { "message_id": "msg_123" }

  /user/chats:
    get:
      tags: [Chat]
      summary: List active chat conversations
      security:
        - bearerAuth: []
      responses:
        200:
          description: Chat list
          content:
            application/json:
              example: { "conversations": [] }

  /user/chat/messages/{message_id}:
    delete:
      tags: [Chat]
      summary: Delete a message
      security:
        - bearerAuth: []
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Message deleted
          content:
            application/json:
              example: { "message": "Message deleted successfully" }

components:
  schemas:
    UserProfile:
      type: object
      properties:
        date_of_birth:
          type: string
          format: date
          example: "1995-05-15"
        community:
          type: string
          enum: ["Sunni", "Shia", "Thabligh", "Mujahid"]
          example: "Sunni"
        nationality:
          type: string
          example: "Indian"
        height:
          type: number
          example: 5.8
        weight:
          type: number
          example: 70
        marital_status:
          type: string
          enum: ["Never married", "Divorced", "Nikah divorce", "Awaiting divorce", "Widower"]
          example: "Never married"
        physically_challenged:
          type: boolean
          example: false
        highest_education:
          type: string
          enum: ["Doctorate", "Masters", "Bachelors", "Diploma", "TTC", "ITI", "Islamic Education", "High School", "Higher Secondary", "Less than high school"]
          example: "Masters"
        course:
          type: string
          example: "MSc Computer Science"
        profession:
          type: string
          example: "Software Engineer"
        profession_type:
          type: string
          enum: ["Student", "Full time", "Part time", "Government", "Private", "Homemaker", "Self Employed", "Retired", "Not employed"]
          example: "Full time"
        home_district:
          type: string
          example: "Kozhikode"
        current_location:
          type: string
          example: "India"
        religiousness:
          type: string
          enum: ["Very religious", "Moderately religious", "Occasionally religious", "Agnostic", "Secular", "Atheist", "Not religious", "Prefer not to say"]
          example: "Very religious"
        financial_status:
          type: string
          enum: ["Lower middle class", "Middle class", "Upper middle class", "Wealthy/affluent", "Prefer not to say"]
          example: "Middle class"

    PartnerPreferences:
      type: object
      properties:
        min_age:
          type: integer
          example: 25
        max_age:
          type: integer
          example: 30
        min_height:
          type: number
          example: 5.5
        max_height:
          type: number
          example: 6.0
        marital_status:
          type: array
          items:
            type: string
          example: ["Never married", "Divorced"]
        education:
          type: array
          items:
            type: string
          example: ["Masters", "Bachelors"]
        profession:
          type: array
          items:
            type: string
          example: ["Software Engineer", "Doctor"]
        home_district:
          type: array
          items:
            type: string
          example: ["Kozhikode", "Trivandrum"]

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT